Sample code which uses Connector/C++ 2.0  {#sample}
========================================

@todo Cross-reference links for classes and methods.

Below a sample code that uses Connector/C++ is presented. The application
connects to MySQL Hybrid plugin loaded into MySQL 5.7 Server, creates
document collection, adds few documents there and then query them and
displays results. See @ref usage for instructions on how to build the sample
code.

@dontinclude test.cc

Code which uses Connector/C++ should include `mysqlx.h` header. The
API is declared within `mysqlx` namespace:

@skip #include <mysqlx.h>
@until using namespace

First thing to do is to create a session object specifying DNS name of
the host running MySQL Server with MySQL Hybrid plugin, port on
which the plugin listens (default port is 33060) and user credentials:

@skipline main
@until Session accepted

Once created, session is ready to be used. If session could not be established,
error would be thrown from `XSession` constructor.

To manipulate documents in a collection we create a `Collection` object,
first asking session for that collection's `Schema` object.

@skipline Schema
@until Collection

The `true` parameter to `createCollection()` method tells that collection should
be re-used if it already exists. Without specifying this parameter an attempt
to create already existing collection would throw an error.

We start with adding couple of documents to the collection. Before doing this
we remove all the existing documents first.

@skipline remove()

Method `remove()` can also accept an expression argument which selects
documents to be removed.
Note that `remove()` method returns an operation that must be explicitly
executed to take effect. When executed, operation returns a result, but we
ignore it here (later we will look at the results).

Now we are ready to insert new documents using `Collection::add()` method.
Documents are described by JSON strings with the same syntax as the one
supported by MySQL Server. Note that double quotes are required
around field names and one has to escape them inside C strings.

@skipline {
@until cout
@until cout
@until cout
@until cout
@until }

This time we store result of the `add()` operation execution to be able to
read id of the documents that were added. These ids are generated by the
connector, unless user specifies `"_id"` field for a document.
Note how internal code block is used to delete result when it is no longer
neeeded.

@note It is possible to chain several `add()` calls as follows:
`coll.add(doc1).add(doc2)...add(docN).execute()`. It is also possible to pass
several documents to single `add()` call:
`coll.add(doc1, ..., docN).execute()`.

Documents of a collection can be queried using `Collection::find()`
method.

@skipline find()

This time we use `DocResult` object to store result of `find()`
operation because it contains the returned sequence of documents that satisfy
the selection criteria. These documents can be fetched one by one using
`RowResult::fetchOne()` method, until it returns `NULL`.

@skipline fetchOne()
@until cout

Given a `DbDoc` object it is possible to iterate over its fields as follows.

@skipline for
@until }

Note how `DbDoc::operator[]` is used to access values of document fields.

@skipline name
@until cout

Field value is automatically converted to a corresponding C++ type. If C++ type
does not match the type of the field value, conversion error will be thrown.
Currently only strings, numbers and documents are converted to C++ types, for
documents the `DbDoc` type is used.

Methods `DbDoc::hasField()` and `DbDoc::fieldType` can be used to examine fields
of a document. Code below demonstrats how to process a `"date"` field of a
docuemnt which is a sub-document.

@skipline if
@until }
@until }

Any errors thrown by Connector/C++ derive from `mysqlx::Error` type and can
be processed as follows:

@skipline catch
@until }

See full documentation of DevAPI implemented by Connector/C++.

@todo Links to DevAPI documentation.

The complete code of the example is presented below:

@include test.cc
