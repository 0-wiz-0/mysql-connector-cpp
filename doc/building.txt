Building Connector/C++ 2.0  {#building}
==========================

Prerequisites
-------------
To build Connector/C++ one needs the following tools and libraries:

- C++ compiler that supports C++11. The following compilers have
  been tested: gcc 4.8.4, MS Visual Studio 2013.

- CMake 2.8.11 or later.

- Boost library - source distribution. Tested with Boost 1.56.

- Protobuf library. Tested with version 1.6.

Build configuration
-------------------
Only out-of-source builds are supported. To configure build
one executes `cmake` in a dedicated build location (not in the
source directory) as usuall:

~~~~~~~
$ cmake -G ... -D ... <Connector/C++ source location>
~~~~~~~

If `cmake` can not find Boost or Protobuf, or if they are installed
in non-standard locations, then one should specify correct locations
with options:

- `-DWITH_BOOST=<Boost location>`
- `-DWITH_PROTOBUF=<Protobuf location>`

Building and testing
--------------------
One can start a build with the following cmake invocation in the build
location:

~~~~~~~
$ cmake --build . --config=CCC
~~~~~~~

where `CCC` is the build configuration, such as `Release` or `Debug`,
which we want to build.

After successful build, build location shouild contain Connector/C++
static library `libmysql_concpp.a` (`CCC/mysql_concpp.lib` on Windows).

### Testing

To perform basic test of the functionality, one can build and run the
test program included in `test` subfolder of the source location. A
running MySQL 5.7 Server instance is needed to run `test` application
(see below).

Before building `test` program Connector/C++ needs to be installed
somewhere. After picking suitable location, one executes in
Connector/C++ location:

~~~~~~~
$ cmake --build . --target install -- DESTDIR=<install location>
~~~~~~~

Building `test` program is managed by `cmake` again. After picking
a build location for `test` one issues the following commands there:

~~~~~~~
$ cmake -G ... -DWITH_CONCPLS=<install location>/usr/local <source location>/test
$ cmake --build . --target test
~~~~~~~

This should create `test` executable in the build location.

Before running `test` one has to ensure that a MySQL Server instance
is running with MySQL Hybrid plugin loaded into it. Easiest way of
arranging this is to use `mysql-test-run.pl` script from MySQL Server
distribution. In the `mysql-test` subfolder of the MySQL Server
location one can ivoke:

~~~~~~~
$ perl mysql-test-run.pl --start-and-exit --mysqld=--plugin-load=mysqlx
~~~~~~~

This should start test server instance with MySQL Hybrid plugin loaded
into it. By default the plugin will listen on port 13010.

Now one can start `test` program and see the output similar to one presented
beolw. The program accepts port number as the first argument, with default
value 33060. Thus, if server was started as described above, one should run

~~~~~~~
$ test 13010
~~~~~~~

The program uses `root` user account without any password and assumes that
there is `test` schema in the server (these assumptions hold for server started
using `mysql-test-run.pl`). Different user credentials can be passed as second
and third argument of `test` invocation.

If everything goes well, `test` should produce output similar to this:

~~~~~~~
Creating session on localhost...
Auth Valid: 
Session accepted, creating collection...
inserting document...
- added doc with id: AA71B4BF6B72E511BD76001E684A06F0
- added doc with id: 2885B4BF6B72E511BD76001E684A06F0
- added doc with id: 3492B4BF6B72E511BD76001E684A06F0
- added doc with id: myuuid-1
Fetching documents...
doc#0: {"_id": "2885B4BF6B72E511BD76001E684A06F0", "age": 2, "name": "bar"}
 field `_id`: 2885B4BF6B72E511BD76001E684A06F0
 field `age`: 2
 field `name`: bar
 name: bar

doc#1: {"_id": "3492B4BF6B72E511BD76001E684A06F0", "age": 3, "date": {"day": 20, "month": "Apr"}, "name": "baz"}
 field `_id`: 3492B4BF6B72E511BD76001E684A06F0
 field `age`: 3
 field `date`: <document>
 field `name`: baz
 name: baz
- date field
  date `day`: 20
  date `month`: Apr
  month: Apr
  day: 20

doc#2: {"_id": "AA71B4BF6B72E511BD76001E684A06F0", "age": 1, "name": "foo"}
 field `_id`: AA71B4BF6B72E511BD76001E684A06F0
 field `age`: 1
 field `name`: foo
 name: foo

doc#3: {"_id": "myuuid-1", "age": 7, "name": "foo"}
 field `_id`: myuuid-1
 field `age`: 7
 field `name`: foo
 name: foo

Done!
~~~~~~~

Windows notes
-------------
On Windows one can request that Connector/C++ uses static runtime
library (The `/MT*` compiler option) by setting:

- `-DSTATIC_MSVCRT=yes`

This might be necessary if code which uses Connector/C++ also uses
static runtime. Also, Protobuf's library dynamic/static runtime type
must match that of Connector/C++.

@todo
  Document caveats with Debug/Release missmatch.
