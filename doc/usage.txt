Using Connector/C++ 2.0  {#usage}
=======================

When compiling code which uses MySQL Connector/C++, add
`<Connector/C++ install location>/include` to the include path of
the project, and link compiled code with
the `<Connector/C++ install location>/lib/libmysqlcppconn2-static.a` library
(currently only static library is available).
On a Linux platform, also link with the `pthread` library on which
Connector/C++ depends on that platform.

Since Connector/C++ uses C++11 language, one should enable C++11 support
in the compiler, unless it is the default. For `gcc` and `clang`
compilers this can be done using `-std=c++11` option. Connector/C++
requires gcc version 4.8 or later.

An example `Makefile` to build an application using Connector/C++,
with sources in `app.cc` looks like this:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include
LDLIBS = -lpthread
CXXFLAGS = -std=c++11
LINK.o = $(LINK.cc)  # use c++ linker

app : app.o $(MYSQL_CONCPP_DIR)/lib/libmysqlcppconn2-static.a
~~~~~~~

To use Connector/C++ API the source code should include the `mysqlx.h` header.
All Connector/C++ API symbols live in the `mysqlx` namespace.


Windows Notes
-------------

The name of the static connector library on Windows is mysqlcppconn2-static.lib.

On Windows, Connector/C++ can be built with the static or the dynamic runtime
library (as selected by the `STATIC_MSVCRT` configuration option, see @ref building).
The runtime type of an application which uses Connector/C++ must match the runtime
type of the connector. The correct runtime type is selected using `/MD` or `/MT`
compiler option which can be configured, e.g., from Visual Studio project settings.

Similar, the 64/32-bit platform for which Connector/C++ was built (as selected by
cmake generator such as `"Visual Studio 12 2013 Win64"` vs `"Visual Studio 12 2013"`)
must match the one for which an application which uses the connector is built.

When building application in 'Debug' build configuration, one has to use Connector/C++
library built in the same configuration. Note that binary packages provided by MySQL
contain 'Release' build of the connector using dynamic runtime library.

@todo Building applications in 'Debug' mode using binary distribution of Connector/C++.
@todo MSVC runtime version issues.

OS X Notes
----------

Binary distribution of Connector/C++ for OS X is compiled using the
OS X native `clang` compiler. For that reason it is best to build
an application that uses the connector with the same `clang` compiler.

The `clang` compiler can use two different implementations of
the C++ runtime library: either the native `libc++` or the GNU `libstdc++`
library. It is important that an application uses the same runtime implementation
as Connector/C++, that is, the native `libc++`. To ensure that, the
`-stdlib=libc++` option should be passed to compiler and linker invocations.

A `Makefile` for OS X build might look as follows:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include
CXX = clang++ -stdlib=libc++
CXXFLAGS = -std=c++11
LINK.o = $(LINK.cc)  # use c++ linker

app : app.o $(MYSQL_CONCPP_DIR)/lib/libmysqlcppconn2-static.a
~~~~~~~

@todo How to build on OSX with XCode.
@todo Dynamic version of the connector library.
@todo Dynamic linking with other connector dependencies.


<!--
  Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.

  The MySQL Connector/C++ is licensed under the terms of the GPLv2
  <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most
  MySQL Connectors. There are special exceptions to the terms and
  conditions of the GPLv2 as it is applied to this software, see the
  FLOSS License Exception
  <http://www.mysql.com/about/legal/licensing/foss-exception.html>.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published
  by the Free Software Foundation; version 2 of the License.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
  for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
-->
