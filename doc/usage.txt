Using Connector/C++ 8.0  {#usage}
=======================

Connector/C++ 8.0 supports X DevAPI, XAPI and legacy C++ JDBC4 API.
Inside the packages the new APIs (X DevAPI and XAPI) and the legacy 
C++ JDBC4 are placed into separate library files:

 - `libmysqlcppconn8`.(.so/.dylib/.dll/.a) containing X DevAPI and XAPI
   functionality
 - `libmysqlcppconn`.(.so/.dylib/.dll/.a) containig legacy C++ JDBC4
   functionality
   
Connector/C++ 8.0 can be used as either a static or a shared library.
If used as a shared library, the library must be installed on the target
machine in order for the application to run. The shared library names are:

- `libmysqlcppconn8.so` and `libmysqlcppconn.so` on Unix platforms
  (the sonames are `libmysqlcppconn8.so.1` and `libmysqlcppconn.so.7`)
- `libmysqlcppconn8.dylib` and `libmysqlcppconn.dylib` on the OSX platform
  (the sonames are `libmysqlcppconn8.1.dylib` and `libmysqlcppconn.7.dylib`)
- `mysqlcppconn8-1-vsXX.dll` and `mysqlcppconn-7-vsXX.dll` on Windows platforms
  (see [Windows Notes](@ref usage_win) for explanation of `-vsXX` suffixes)

The static library names are:

- `libmysqlcppconn8-static.a` and `libmysqlcppconn-static.a` on OSX and
  Unix platforms.
- `mysqlcppconn8-static.lib` and `mysqlcppconn-static.lib` on Windows platforms.

In what follows we assume that Connector/C++ 8.0 is installed to the location
given by `$MYSQL_CONCPP_DIR`.


Using the shared library
------------------------
The choice of the API is done by including the appropriate set of headers.

When compiling code which uses the connector set the following include paths:

 - `$MYSQL_CONCPP_DIR/include` for X DevAPI/XAPI
 
 - `$MYSQL_CONCPP_DIR/include/jdbc` for legacy C++ JDBC4 API
   @note The legacy code that uses Connector/C++ 1.1 has includes like
~~~~
#include <mysql_driver.h>
~~~~
   Therefore, in order to match the file layout of the headers in
   Connector/C++ 8 such include statements must be changed to
~~~~
#include <jdbc/mysql_driver.h>
~~~~
   Alternatively, the include path could be set to
   `$MYSQL_CONCPP_DIR/include/jdbc`
   
 
The library paths are the same for X DevAPI/XAPI and legacy C++ JDBC4 API:
`$MYSQL_CONCPP_DIR/lib` or `$MYSQL_CONCPP_DIR/lib64` (the latter on a 64-bit
platform).
Then add `-lmysqlcppconn8` for X DevAPI/XAPI or `-lmysqlcppconn` for legacy C++
JDBC4 API to the linker options.

Different platforms might require additional libraries or compiler/linker
options:

 - For Linux the following options might be required `-lpthread`
 
 - In Solaris the user might need adding `-lsocket -lnsl -lrt`
 
 - In OSX it can be `-stdlib=libc++`

If code uses X DevAPI, enable C++11 support in the compiler as it is required
by the X DevAPI headers. For `gcc` and `clang` compilers this can be done
using `-std=c++11` option. It is essential to build the aplication with the
same version of the build toold that was using for building Connector/C++.
The build tools versions depend on the platform and can be found inside
BUILDINFO.txt file inside the Connector/C++ package.

@note For the legacty C++ JDBC4 API the support for C++11 is not required.

An example `Makefile` to build an application which uses Connector/C++ X DevAPI,
with sources in `app.cc` is shown below:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include -L $(MYSQL_CONCPP_DIR)/lib64
LDLIBS = -lmysqlcppconn8 -lpthread
CXXFLAGS = -std=c++11

app : app.cc
~~~~~~~

It generates the following compiler invocation:

~~~~~~~~
g++ -std=c++11 -I .../include -L .../lib64  app.cc  -lmysqlcppconn8 -lpthread -o app
~~~~~~~~

@note For linking against the legacy C++ JDBC4 library the library name would be
`-lmysqlcppconn`. Also, the option `-std=c++11` could be omitted unless the user
code utilizes C++11.

The connector can be also used with plain C code written against XAPI.
An example `Makefile` to build a plain C application from sources in `app.c`
might look like this:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include -L $(MYSQL_CONCPP_DIR)/lib64
LDLIBS = -lmysqlcppconn8 -lpthread

app : app.c
~~~~~~~

which generates the following compiler invocation:

~~~~~~~
cc  -I .../include -L .../lib64  app.c  -lmysqlcppconn8 -lpthread -o app
~~~~~~~

Note that the resulting code, even though it is compiled as plain C, will
depend on the C++ runtime (`libstdc++`).

@note When running an application which uses the shared Connector/C++ library,
the library must be found by the dynamic linker. Either the connector library
must be installed in a system-wide location known to the dynamic linker, or
one can set the LD_LIBRARY_PATH environment variable to indicate the location
where connector libraries can be found.

@note Because Connector/C++ exports C++ classes in its X DevAPI, code which
uses it should be built using the same compiler that was used to build the
connector. The Connector/C++ distribution includes the BUILDINFO.txt file
containing information about the compiler used to build the connector.
If using the binary distribution of the connector, then compile with
`clang` on OSX and with `gcc` on other Unix systems. See also [Window Notes]
(@ref usage_win) for details about compiling code on Windows.

When Connector/C++ is configured to be built to use OpenSSL it will make
the connector library dependent on shared OpenSSL libraries. The dynamic linker
needs to be able to find not only the connector library at the run time,
but also OpenSSL libraries. One option is to put OpenSSL libraries in the same
location as the connector libraries, as is the case when installing connector
from MySQL binary packages. In this case the dynamic linker should correctly
locate OpenSSL libraries next to the connector library.



Using the static library
------------------------

It is possible to link your application with the static connector library. This
way there is no runtime dependency on the connector and the resulting binary
can run on systems where Connector/C++ is not installed.

When compiling code which is linked with the connector library statically,
it is important to define the `STATIC_CONCPP` macro. This macro is used
to adjust API declarations in connector's public headers for usage with
the static library.

@note The `STATIC_CONCPP` macro triggers building of the static library only for
   X DevAPI/XAPI part of the connector. Enabling the static library for the
   legacy C++ JDBC4 API requires adding a definition for CPPCONN_PUBLIC_FUNC as
   an empty macro. Check [here] (https://dev.mysql.com/doc/connector-cpp/en/connector-cpp-apps-windows-visual-studio.html)
   for more information

An example `Makefile` to build a C++ application that links to the connector
library statically is shown below:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -DSTATIC_CONCPP -I $(MYSQL_CONCPP_DIR)/include
LDLIBS = $(MYSQL_CONCPP_DIR)/lib64/libmysqlcppconn8-static.a -lpthread
CXXFLAGS = -std=c++11

app : app.cc
~~~~~~~

It generates the following compiler invocation:

~~~~~~~
g++ -std=c++11 -DSTATIC_CONCPP -I .../include  app.cc  .../lib64/libmysqlcppconn8-static.a -lpthread -o app
~~~~~~~

@note For linking against the legacy C++ JDBC4 library the library name would be
`-lmysqlcppconn`. Also, the option `-std=c++11` could be omitted unless the user
code utilizes C++11.

When building plain C code it is important to take care of connector's
dependency on the C++ runtime. Best way is to ensure that a C++ linker is used
to build the final code. This approach is taken in the example `Makefile` below:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -DSTATIC_CONCPP -I $(MYSQL_CONCPP_DIR)/include
LDLIBS = $(MYSQL_CONCPP_DIR)/lib64/libmysqlcppconn8-static.a -lpthread
LINK.o = $(LINK.cc) # use C++ linker

app : app.o
~~~~~~~

With this `Makefile` the build process has two steps: first the application
source in `app.c` is compiled using plain C compiler, then the final executable
is linked using the C++ linker which takes care of the dependency on the
C++ runtime:

~~~~~~~
cc  -DSTATIC_CONCPP -I .../include  -c -o app.o app.c
g++  -DSTATIC_CONCPP -I .../include  app.o  .../libmysqlcppconn8-static.a -lpthread -o app
~~~~~~~


Another approach is to use plain C compiler and linker, but add the C++ runtime
library `libstdc++` as an explicit input to the linker:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include
LDLIBS = $(MYSQL_CONCPP_DIR)/lib64/libmysqlcppconn8-static.a -lpthread -lstdc++

app : app.c
~~~~~~~

With this `Makefile` the compiler is invoked as follows:

~~~~~~~
cc  -DSTATIC_CONCPP -I .../include  app.c  .../libmysqlcppconn8-static.a -lpthread -lstdc++ -o app
~~~~~~~

When linking statically to Connector/C++ that was built with OpenSSL, the
OpenSSL libraries must be specified to the linker.
An example `Makefile` C application from sources in `app.c`
might look like this:

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -DSTATIC_CONCPP -I $(MYSQL_CONCPP_DIR)/include
LDLIBS = $(MYSQL_CONCPP_DIR)/lib64/libmysqlcppconn8-static.a -lpthread -lssl -lcrypto
CXXFLAGS = -std=c++11

app : app.cc
~~~~~~~

It generates the following compiler invocation:
~~~~~~~
g++ -std=c++11 -DSTATIC_CONCPP -I .../include  app.cc  .../lib64/libmysqlcppconn8-static.a -lpthread -lssl -lcrypto -o app
~~~~~~~

@note In the above case the Connector/C++ static library code is embedded into
the resulting binary application, but the dynamic linker needs to find OpenSSL
libraries. It can use OpenSSL that is installed in the system or bundled with
MySQL packages.

@note Even if the application that uses Connector/C++ is written in plain C, the
final executable will depend on the C++ runtime which must be installed on the
target computer on which the application will run.

OS X Notes
----------

The binary distribution of Connector/C++ for OS X is compiled using the OS X
native `clang` compiler. For that reason an application that uses the connector
should be built with the same `clang` compiler.

The `clang` compiler can use two different implementations of the C++ runtime
library: either the native `libc++` or the GNU `libstdc++` library. It is
important that an application uses the same runtime implementation
as Connector/C++, that is, the native `libc++`. To ensure that, the
`-stdlib=libc++` option should be passed to the compiler and the linker
invocations.

An example `Makefile` for OS X build is shown below. Note that there is no
dependency on `pthread` library on OS X.

~~~~~~~
MYSQL_CONCPP_DIR= ...
CPPFLAGS = -I $(MYSQL_CONCPP_DIR)/include -L $(MYSQL_CONCPP_DIR)/lib64
LDLIBS = -lmysqlcppconn8
CXX = clang++ -stdlib=libc++
CXXFLAGS = -std=c++11

app : app.cc
~~~~~~~


Windows Notes                                            @anchor usage_win
-------------

On Windows applications can be built in different modes (also called build
configurations) which determine the type of the runtime library that is
used by the final executable. An application can be built in a debug or
a release mode. Then it can be built in a 32-bit or a 64-bit mode. Also, one
can choose between the static (`/MT`) or the dynamic (`/MD`) runtime. Different
versions of the MSVC compiler also use different versions of the runtime.

It is important to ensure that the compiler version and the build mode of
an application matches the same parameters used when building the connector
library. This is to ensure that the runtime library used by the connector
and the application is the same.

@note Only release mode builds are supported by the current binary
distribution of Connector/C++ 8.0. Debug variants of the connector
libraries, if required, must be built from sources.

There are separate 32-bit and 64-bit packages, each keeping libraries in
`lib/` and `lib64/` folder, respectively. The library folder contains two
versions of the shared library:

- `mysqlcppconn8-vs14.dll` - built with MSVC 2015, compiler version 19.00

The corresponding import libraries are in `vs14/` subfolder
of the library folder:

- `vs14/mysqlcppconn8.lib` - import library for `mysqlcppconn8-vs14.dll`

A project which uses the shared connector library must be configured to link
with the import library `mysqlcppconn8.lib`. The library path should be
set to `.../vs14` or other, as appropriate for the MSVC version being
used.

@note An application which uses the shared connector library must be able
to locate it at the runtime. The common way of arranging this is to put
the connector DLL in the same location as the executable.


The static library comes with its code generated for the dynamic runtime (`/MD`)
and has a name `mysqlcppconn8-static.lib` for X DevAPI/XAPI and
`mysqlcppconn-static.lib` for the legacy C++ JDBC4 API.
These libraries are found in `vs14/` ov `vsXX` subfolder, as
appropriate for the MSVC version being used.

@note The shared library uses dynamic runtime (`/MD`) and the code which uses
the shared library should be built in the same `/MD` mode. There is
no possibility to use shared connector library from code built in `/MT` mode.
Attempt to do it can lead to undefined behavior.


<!--
  Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License, version 2.0, as
  published by the Free Software Foundation.

  This program is also distributed with certain software (including
  but not limited to OpenSSL) that is licensed under separate terms,
  as designated in a particular file or component or in included license
  documentation.  The authors of MySQL hereby grant you an
  additional permission to link the program and your derivative works
  with the separately licensed software that they have included with
  MySQL.

  Without limiting anything contained in the foregoing, this file,
  which is part of MySQL Connector/C++, is also subject to the
  Universal FOSS Exception, version 1.0, a copy of which can be found at
  http://oss.oracle.com/licenses/universal-foss-exception.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU General Public License, version 2.0, for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA
-->
