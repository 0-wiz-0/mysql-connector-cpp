=================================
 Connector/C++ code organization
=================================

.. todo:: Fill this section.


Public and local headers
========================

Namespaces
==========

Unit tests
==========

Any code added to the repo should have a unit tests that uses that code.

Unit tests for each component are defined in ``tests`` sub-folder of that component
folder, for example ``foundation/tests``. Source files containing unit tests should
be declared using cmake macro::

  ADD_NG_TESTS(<list of source files>)

We use gtest framework to define tests. If unit tests depend on other libraries, such
as Boost, these libraries should be declared with::

  ADD_TEST_LIBRARIES(<list of libraries>)

Additional include directories required by unit tests should be declared with::

  ADD_TEST_INCLUDES(<list of include paths>)

All unit tests can be run using ``run_unit_tests`` app built by the project.

CTest integration
-----------------

Project defines target ``update_test_groups`` which generates ``TestGroups.cmake`` file
which defines ``CTest`` tests for each unit test group defined by unit test sources. For
example, all unit tests in ``Framework`` group will be defined as single ``CTest`` entry.
The standard ``run_tests`` target generated by ``CTest`` runs these test groups defined
by ``TestGroups.cmake`` file (which is generated in build location).

Generated file ``TestGroups.cmake`` is included from project's cmake files. After running
``update_test_groups`` target one has to run ``cmake`` again for test group definitions
to be addded to the project.

Other coding guidelines
=======================

- We use general NG coding guidelines:
  https://stbeehive.oracle.com/teamcollab/wiki/MySQLng:Coding+Guidelines

- Unless really needed, all classes should disable copy constructor.

- In public headers declare only public interface, implementation details should
  be defined only in implementation files.

- Hide class members as much as possible - be conscious whether a member should be
  ``public`` or ``protected`` - assume private as default and change only if needed.
  The same goes with inheritance - use public one only if really needed (which most
  often is the case, but not always).

- Remember that classes intended to be extended and which need a destructor, should
  define a virtual one.
