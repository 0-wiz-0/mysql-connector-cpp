# Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
#
# The MySQL Connector/C++ is licensed under the terms of the GPLv2
# <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>, like most
# MySQL Connectors. There are special exceptions to the terms and
# conditions of the GPLv2 as it is applied to this software, see the
# FLOSS License Exception
# <http://www.mysql.com/about/legal/licensing/foss-exception.html>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA


step("Run try programm")
########################

find_program(TRY try
  PATHS ${CTEST_BINARY_DIRECTORY}
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
#message("try executable: ${TRY}")

execute_process(COMMAND ${TRY})


step("Run unit tests")
######################

# Find run_unit_tests program generated by build phase

find_program(RUN_UNIT_TESTS run_unit_tests
  PATHS ${CTEST_BINARY_DIRECTORY}
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
#message("run_unit_tests: ${RUN_UNIT_TESTS}")

if(NOT RUN_UNIT_TESTS)

  message(WARNING "Could not generate test group definitions:"
          " run_unit_tests executable not found!")

else()

message("Generating test groups using: ${RUN_UNIT_TESTS}")

# Generate the TestGroups.cmake file

execute_process(COMMAND ${RUN_UNIT_TESTS}
  --generate_test_groups=TestGroups.cmake
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  RESULT_VARIABLE gen_groups_result
)
message("gen_groups_result: ${gen_groups_result}")

if(gen_groups_result)

  message(WARNING "Could not generate test group definitions:"
          " ${gen_groups_result}")

else()

# Run cmake again to process generated TestGroups.cmake file

execute_process(COMMAND ${CMAKE_COMMAND} .
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  OUTPUT_QUIET ERROR_QUIET)


ctest_test()


#
# Coverage
#

if(CTEST_COVERAGE_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    step("Coverage")
    ################
    ctest_coverage(RETURN_VALUE coverage_result)
  endif()
endif(CTEST_COVERAGE_COMMAND)

#
# Memory Checker
#

if(CTEST_MEMORYCHECK_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    step("Memory Checker")
    ######################
    ctest_memcheck(RETURN_VALUE memcheck_result)
  endif()
endif(CTEST_MEMORYCHECK_COMMAND)


endif(gen_groups_result)
endif(NOT RUN_UNIT_TESTS)


step("Install")
###############

execute_process(COMMAND ${CMAKE_COMMAND}
  --build .
  --target install
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
)

step("Configure test project")
##############################

file(REMOVE_RECURSE ${CTEST_BINARY_DIRECTORY}/test)
file(MAKE_DIRECTORY ${CTEST_BINARY_DIRECTORY}/test)

if(WIN32 AND DEFINED STATIC_MSVCRT)
  set(config_options "-DSTATIC_MSVCRT=${STATIC_MSVCRT}")
endif()

execute_process(COMMAND ${CMAKE_COMMAND}
  -DWITH_CONCPLS=${CTEST_BINARY_DIRECTORY}/install
  ${config_options}
  ${CTEST_SOURCE_DIRECTORY}/test
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}/test
  RESULT_VARIABLE config_result
)

if(config_result)
  message(ERROR "Failed to configure test project")
  return()
endif()


step("Build test project")
##########################

execute_process(COMMAND ${CMAKE_COMMAND}
  --build .
  --target test
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}/test
  RESULT_VARIABLE build_result
)

if(build_result)
  message(ERROR "Failed to build test project")
  return()
endif()


step("Execute test programm")
#############################

find_program(TEST test
  PATHS ${CTEST_BINARY_DIRECTORY}/test
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
message("test executable: ${TEST}")

execute_process(COMMAND ${TEST} 13010
  RESULT_VARIABLE run_result
)

if(run_result)
  fail("Test run failed.")
endif()

