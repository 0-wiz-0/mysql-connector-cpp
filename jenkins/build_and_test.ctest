# Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301  USA


#
#  ctest invocation options that need to be defined:
#
#  -D SITE=<cdash site name>
#  -D SOURCE=<src location>
#  -D GENERATOR=<cmake generator name>
#  -D WITH_GTEST=<gtest location>
#
#  additional options that can be specified
#
#  -D BUILD=<build location>   # defaults to ./build
#  -D WITH_BOOST=<boost location>
#  -D SUBMIT=0   # do not submit to cdash
#  -D STATIC_MSVCRT=yes/no  # passed to build configuration
#  -D WITH_PACKAGES=yes/no  # configure for package build
#

#
#  TODO:
#  - abort and submit to cdash in case of errors (macro fail(msg))
#

GET_FILENAME_COMPONENT(current_dir ${CMAKE_CURRENT_LIST_FILE} PATH)
LIST(APPEND CMAKE_MODULE_PATH ${current_dir})
#MESSAGE("added module path: ${CMAKE_MODULE_PATH}")

include(common)

#
#  Parameters
#

check_param(SITE "cdash site name")
set(CTEST_SITE ${SITE})

check_param(SOURCE "source location")
get_filename_component(CTEST_SOURCE_DIRECTORY ${SOURCE} ABSOLUTE)

set_param(BUILD "build location" build)
get_filename_component(CTEST_BINARY_DIRECTORY ${BUILD} ABSOLUTE)

set_param(GENERATOR "cmake generator name")

set_param(WITH_BOOST "boost location")
if (DEFINED WITH_BOOST)
get_filename_component(WITH_BOOST ${WITH_BOOST} ABSOLUTE)
endif()

set_param(WITH_PACKAGES "package build")

#check_param(WITH_GTEST "gtest location")
#get_filename_component(WITH_GTEST ${WITH_GTEST} ABSOLUTE)

set_param(branch "branch name for cdash build name" local)
set(CTEST_BUILD_NAME "${branch}-${CMAKE_HOST_SYSTEM_NAME}")

set_param(VERBOSE "generate verbose makefile" no)

#
# Start building and testing
#

start(${branch})

message("Building from sources at: ${CTEST_SOURCE_DIRECTORY}")
message("Building in: ${CTEST_BINARY_DIRECTORY}")
message("")


message("Cleaning build location")

if(CTEST_BINARY_DIRECTORY STREQUAL CTEST_SOURCE_DIRECTORY)
  message(FATAL_ERROR "build location the same as source location"
          " - this script wipes out build location!")
endif()

file(REMOVE_RECURSE ${CTEST_BINARY_DIRECTORY})
file(MAKE_DIRECTORY ${CTEST_BINARY_DIRECTORY})


step("Configure build")
#######################

if(DEFINED GENERATOR)
  set(CTEST_CMAKE_GENERATOR "${GENERATOR}")
else()
  if (WIN32)
    set(CTEST_CMAKE_GENERATOR "Visual Studio 12")
  else()
    set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
  endif()
endif()

message("Using cmake generator: ${CTEST_CMAKE_GENERATOR}")


list(APPEND CONFIG_OPTIONS "-DCMAKE_INSTALL_PREFIX=${CTEST_BINARY_DIRECTORY}/install")
list(APPEND CONFIG_OPTIONS -DWITH_TESTS=0)
list(APPEND CONFIG_OPTIONS -DWITH_DOC=0)
if(DEFINED WITH_BOOST)
  list(APPEND CONFIG_OPTIONS -DWITH_BOOST=${WITH_BOOST})
else()
  if(NOT WIN32)
    list(APPEND CONFIG_OPTIONS -DBOOST_SYSTEM_LIBS=1)
  endif()
endif()
#list(APPEND CONFIG_OPTIONS -DWITH_GTEST=${WITH_GTEST})
if(WIN32 AND STATIC_MSVCRT)
  list(APPEND CONFIG_OPTIONS -DSTATIC_MSVCRT=${STATIC_MSVCRT})
endif()
if(NOT WIN32)
  list(APPEND CONFIG_OPTIONS -DCMAKE_CXX_FLAGS_DEBUG="-Wall -Wextra")
  # TODO: Add coverage/valgrind when supported by project
  #list(APPEND CONFIG_OPTIONS -DWITH_COVERAGE=1)
  #find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
  #find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
endif()
if(VERBOSE)
  list(APPEND CONFIG_OPTIONS -DCMAKE_VERBOSE_MAKEFILE=yes)
endif()
if(WITH_PACKAGES)
  list(APPEND CONFIG_OPTIONS -DWITH_PACKAGES=yes)
endif()

ctest_configure(
  OPTIONS "${CONFIG_OPTIONS}"
  RETURN_VALUE config_result)

if(config_result)
 fail("build configuration failed")
endif()


step("Build code")
##################

#if(WIN32)
#  set(CTEST_CONFIGURATION_TYPE "RelWithDebInfo")
#endif()

ctest_build(RETURN_VALUE build_result)
message("build_result: ${build_result}")

if(build_result)
 fail("build failed")
endif()


if(DEFINED ENV{XPLUGIN_BUILD_DIR})

  step("Start xplugin server at: $ENV{XPLUGIN_BUILD_DIR}")
  ########################################################

  if(NOT EXISTS $ENV{XPLUGIN_BUILD_DIR}/mysql-test/mtr)

    message(WARNING "Server build not found at XPLUGIN_BUILD_DIR location")

  else()

  find_path(PLUGIN_DIR mysqlx.so
    PATHS $ENV{XPLUGIN_BUILD_DIR}/lib/plugin
          $ENV{XPLUGIN_BUILD_DIR}/plugin/x
    NO_DEFAULT_PATH
  )

  if(NOT PLUGIN_DIR)

    message(WARNING "Xplugin not found in $ENV{XPLUGIN_BUILD_DIR}")

  else()

  execute_process(
    COMMAND ./mtr --start-and-exit
                --vardir=$ENV{WORKSPACE}/mysqldata
                --mysqld=--plugin-dir=${PLUGIN_DIR}
                --mysqld=--plugin-load=mysqlx=mysqlx.so
    WORKING_DIRECTORY "$ENV{XPLUGIN_BUILD_DIR}/mysql-test"
    RESULT_VARIABLE xplugin_run
  )

  if(xplugin_run)
    message(WARNING "Failed to start xplugin server: ${xplugin_run}")
  else()

    set(ENV{XPLUGIN_PORT} 13010)
    set(ENV{XPLUGIN_USER} root)
    message("xplugin connection: $ENV{XPLUGIN_PORT}, $ENV{XPLUGIN_USER}")

    find_program(MYSQLADMIN mysqladmin
      PATHS "$ENV{XPLUGIN_BUILD_DIR}/client"
      PATH_SUFFIXES Debug Release RelWithDebInfo
      NO_DEFAULT_PATH
    )

  endif()

  endif(NOT PLUGIN_DIR)
  endif(NOT EXISTS $ENV{XPLUGIN_BUILD_DIR}/mysql-test/mtr)

endif()


include(run_tests)


if(DEFINED MYSQLADMIN)

  step("Shutting down xplugin server")
  ####################################
  execute_process(
    COMMAND ${MYSQLADMIN} --protocol=tcp --port=13000 --user=root shutdown
  )

endif()

done()
