#
#  ctest invocation options that need to be defined:
#
#  -D SITE=<cdash site name>
#  -D SOURCE=<src location>
#  -D GENERATOR=<cmake generator name>
#  -D WITH_PROTOBUF=<protobuf location>
#  -D WITH_GTEST=<gtest location>
#
#  additional options that can be specified
#
#  -D BUILD=<build location>   # defaults to ./build
#  -D WITH_BOOST=<boost location>
#  -D SUBMIT=0   # do not submit to cdash
#  -D STATIC_MSVCRT=yes/no  # passed to build configuration
#

#
#  TODO:
#  - abort and submit to cdash in case of errors (macro fail(msg))
#

GET_FILENAME_COMPONENT(current_dir ${CMAKE_CURRENT_LIST_FILE} PATH)
LIST(APPEND CMAKE_MODULE_PATH ${current_dir})
#MESSAGE("added module path: ${CMAKE_MODULE_PATH}")

include(common)

#
#  Parameters
#

check_param(SITE "cdash site name")
set(CTEST_SITE ${SITE})

check_param(SOURCE "source location")
get_filename_component(CTEST_SOURCE_DIRECTORY ${SOURCE} ABSOLUTE)

set_param(BUILD "build location" build)
get_filename_component(CTEST_BINARY_DIRECTORY ${BUILD} ABSOLUTE)

set_param(GENERATOR "cmake generator name")

check_param(WITH_PROTOBUF "protobuf location")
get_filename_component(WITH_PROTOBUF ${WITH_PROTOBUF} ABSOLUTE)

set_param(WITH_BOOST "boost location")
if (DEFINED WITH_BOOST)
get_filename_component(WITH_BOOST ${WITH_BOOST} ABSOLUTE)
endif()

#check_param(WITH_GTEST "gtest location")
#get_filename_component(WITH_GTEST ${WITH_GTEST} ABSOLUTE)

set_param(branch "branch name for cdash build name" local)
set(CTEST_BUILD_NAME "${branch}-${CMAKE_HOST_SYSTEM_NAME}")


#
# Start building and testing
#

start()

message("Building from sources at: ${CTEST_SOURCE_DIRECTORY}")
message("Building in: ${CTEST_BINARY_DIRECTORY}")
message("")


message("Cleaning build location")

if(CTEST_BINARY_DIRECTORY STREQUAL CTEST_SOURCE_DIRECTORY)
  message(FATAL_ERROR "build location the same as source location"
          " - this script wipes out build location!")
endif()

file(REMOVE_RECURSE ${CTEST_BINARY_DIRECTORY})
file(MAKE_DIRECTORY ${CTEST_BINARY_DIRECTORY})


step("Configure build")
#######################

if(DEFINED GENERATOR)
  set(CTEST_CMAKE_GENERATOR ${GENERATOR})
else()
  if (WIN32)
    set(CTEST_CMAKE_GENERATOR "Visual Studio 12")
  else()
    set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
  endif()
endif()

message("Using cmake generator: ${CTEST_CMAKE_GENERATOR}")


list(APPEND CONFIG_OPTIONS -DWITH_TESTS=0)
list(APPEND CONFIG_OPTIONS -DWITH_DOC=0)
list(APPEND CONFIG_OPTIONS -DWITH_PROTOBUF=${WITH_PROTOBUF})
if(DEFINED WITH_BOOST)
  list(APPEND CONFIG_OPTIONS -DWITH_BOOST=${WITH_BOOST})
else()
  if(NOT WIN32)
    list(APPEND CONFIG_OPTIONS -DBOOST_SYSTEM_LIBS=1)
  endif()
endif()
#list(APPEND CONFIG_OPTIONS -DWITH_GTEST=${WITH_GTEST})
if(WIN32 AND STATIC_MSVCRT)
  list(APPEND CONFIG_OPTIONS -DSTATIC_MSVCRT=${STATIC_MSVCRT})
endif()
if(NOT WIN32)
  list(APPEND CONFIG_OPTIONS -DWITH_COVERAGE=1)
  list(APPEND CONFIG_OPTIONS -DCMAKE_CXX_FLAGS_DEBUG="-Wall -Wextra")
  find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
  find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
endif()

ctest_configure(
  OPTIONS "${CONFIG_OPTIONS}"
  RETURN_VALUE config_result)

if(config_result)
 fail("build configuration failed")
endif()


step("Build code")
##################

#if(WIN32)
#  set(CTEST_CONFIGURATION_TYPE "RelWithDebInfo")
#endif()

ctest_build(RETURN_VALUE build_result)
message("build_result: ${build_result}")

if(build_result)
 fail("build failed")
endif()


if(DEFINED ENV{XPLUGIN_BUILD_DIR})

  step("Start xplugin server at: $ENV{XPLUGIN_BUILD_DIR}")
  ########################################################

  if(NOT EXISTS $ENV{XPLUGIN_BUILD_DIR}/mysql-test/mtr)

    message(WARNING "Server build not found at XPLUGIN_BUILD_DIR location")

  else()

  execute_process(
    COMMAND ./mtr --start-and-exit
                --vardir=$ENV{WORKSPACE}/mysqldata
                --mysqld=--plugin-dir=$ENV{XPLUGIN_BUILD_DIR}/plugin/x
                --mysqld=--plugin-load=mysqlxplugin=mysqlxplugin.so
    WORKING_DIRECTORY "$ENV{XPLUGIN_BUILD_DIR}/mysql-test"
    RESULT_VARIABLE xplugin_run
  )

  if(xplugin_run)
    message(WARNING "Failed to start xplugin server: ${xplugin_run}")
  else()
    set(ENV{XPLUGIN_PORT} 33060)
    set(ENV{XPLUGIN_USER} root)
    message("")

    find_program(MYSQLADMIN mysqladmin
      PATHS "$ENV{XPLUGIN_BUILD_DIR}/client"
      PATH_SUFFIXES Debug Release RelWithDebInfo
      NO_DEFAULT_PATH
    )

  endif()

  endif(NOT EXISTS $ENV{XPLUGIN_BUILD_DIR}/mysql-test/mtr)

endif()


step("Run try programm")
########################

find_program(TRY try
  PATHS ${CTEST_BINARY_DIRECTORY}
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
#message("try executable: ${TRY}")

execute_process(COMMAND ${TRY})


if(0)

# Find run_unit_tests program generated by build phase

find_program(RUN_UNIT_TESTS run_unit_tests
  PATHS ${CTEST_BINARY_DIRECTORY}
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
#message("run_unit_tests: ${RUN_UNIT_TESTS}")

if(NOT RUN_UNIT_TESTS)

  message(WARNING "Could not generate test group definitions:"
          " run_unit_tests executable not found!")

else()

message("Generating test groups using: ${RUN_UNIT_TESTS}")

# Generate the TestGroups.cmake file

execute_process(COMMAND ${RUN_UNIT_TESTS}
  --generate_test_groups=TestGroups.cmake
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  RESULT_VARIABLE gen_groups_result
)
message("gen_groups_result: ${gen_groups_result}")

if(gen_groups_result)

  message(WARNING "Could not generate test group definitions:"
          " ${gen_groups_result}")

else()

# Run cmake again to process generated TestGroups.cmake file

execute_process(COMMAND ${CMAKE_COMMAND} .
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  OUTPUT_QUIET ERROR_QUIET)

# Then run the tests

ctest_test()


#
# Coverage
#

if(CTEST_COVERAGE_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    ctest_coverage(RETURN_VALUE coverage_result)
  endif()
endif(CTEST_COVERAGE_COMMAND)

#
# Memory Checker
#

if(CTEST_MEMORYCHECK_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    ctest_memcheck(RETURN_VALUE memcheck_result)
  endif()
endif(CTEST_MEMORYCHECK_COMMAND)


endif(gen_groups_result)
endif(NOT RUN_UNIT_TESTS)
endif()


if(DEFINED MYSQLADMIN)

  step("Shutting down xplugin server")
  ####################################
  execute_process(
    COMMAND ${MYSQLADMIN} --protocol=tcp --port=13000 --user=root shutdown
  )

endif()

done()
