#
#  ctest invocation options that need to be defined:
#
#  -D SITE=<cdash site name>
#  -D SOURCE=<src location>
#  -D GENERATOR=<cmake generator name>
#  -D WITH_PROTOBUF=<protobuf location>
#  -D WITH_GTEST=<gtest location>
#
#  additional options that can be specified
#
#  -D BUILD=<build location>   # defaults to ./build
#  -D WITH_BOOST=<boost location>
#  -D SUBMIT=0   # do not submit to cdash
#  -D STATIC_MSVCRT=yes/no  # passed to build configuration
#

set(BRANCH $ENV{branch})
if(NOT BRANCH)
  set(BRANCH local)
endif()
set(CTEST_BUILD_NAME "${BRANCH}-${CMAKE_HOST_SYSTEM_NAME}")

macro(check name msg)
if (NOT DEFINED ${name})
  message(FATAL_ERROR "Set ${msg} with -D ${name}=... option")
endif()
endmacro()

check(SITE "cdash site name")
set(CTEST_SITE ${SITE})

check(SOURCE "source location")
get_filename_component(CTEST_SOURCE_DIRECTORY ${SOURCE} ABSOLUTE)

if(NOT BUILD)
 set(BUILD build)
endif()
get_filename_component(CTEST_BINARY_DIRECTORY ${BUILD} ABSOLUTE)

check(GENERATOR "cmake generator name")
set(CTEST_CMAKE_GENERATOR ${GENERATOR})

check(WITH_PROTOBUF "protobuf location")
get_filename_component(WITH_PROTOBUF ${WITH_PROTOBUF} ABSOLUTE)

if (WITH_BOOST)
get_filename_component(WITH_BOOST ${WITH_BOOST} ABSOLUTE)
endif()

check(WITH_GTEST "gtest location")
get_filename_component(WITH_GTEST ${WITH_GTEST} ABSOLUTE)

if(NOT CTEST_MODEL)
  if(BRANCH STREQUAL "master")
    set(CTEST_MODEL Continuous)
  else()
    set(CTEST_MODEL Experimental)
  endif()
endif()

#
# Start dashboard and configure build
#

if(CTEST_BINARY_DIRECTORY STREQUAL CTEST_SOURCE_DIRECTORY)
  message(FATAL_ERROR "build location the same as source location"
          " - this script wipes out build location!")
endif()

file(REMOVE_RECURSE ${CTEST_BINARY_DIRECTORY})
file(MAKE_DIRECTORY ${CTEST_BINARY_DIRECTORY})

ctest_start(${CTEST_MODEL})

list(APPEND CONFIG_OPTIONS -DWITH_TESTS=1)
list(APPEND CONFIG_OPTIONS -DWITH_DOC=0)
list(APPEND CONFIG_OPTIONS -DWITH_PROTOBUF=${WITH_PROTOBUF})
if(WITH_BOOST)
  list(APPEND CONFIG_OPTIONS -DWITH_BOOST=${WITH_BOOST})
else()
  if(NOT WIN32)
    list(APPEND CONFIG_OPTIONS -DBOOST_SYSTEM_LIBS=1)
  endif()
endif()
list(APPEND CONFIG_OPTIONS -DWITH_GTEST=${WITH_GTEST})
if(DEFINED STATIC_MSVCRT)
  list(APPEND CONFIG_OPTIONS -DSTATIC_MSVCRT=${STATIC_MSVCRT})
endif()
if(NOT WIN32)
  list(APPEND CONFIG_OPTIONS -DWITH_COVERAGE=1)
  list(APPEND CONFIG_OPTIONS -DCMAKE_CXX_FLAGS_DEBUG="-Wall -Wextra")
  find_program(CTEST_COVERAGE_COMMAND NAMES gcov)
  find_program(CTEST_MEMORYCHECK_COMMAND NAMES valgrind)
endif()

ctest_configure(
  OPTIONS "${CONFIG_OPTIONS}"
  RETURN_VALUE config_result)

if(NOT config_result)

#
# Build code
#

ctest_build(RETURN_VALUE build_result)

#
# Generate test group information and run tests
#

if(NOT build_result)

# Find run_unit_tests program generated by build phase

find_program(RUN_UNIT_TESTS run_unit_tests
  PATHS ${CTEST_BINARY_DIRECTORY}
  PATH_SUFFIXES Debug Release RelWithDebInfo
  NO_DEFAULT_PATH
)
#message("run_unit_tests: ${RUN_UNIT_TESTS}")

if(NOT RUN_UNIT_TESTS)

  message(WARNING "Could not generate test group definitions:"
          " run_unit_tests executable not found!")

else()

message("Generating test groups using: ${RUN_UNIT_TESTS}")

# Generate the TestGroups.cmake file

execute_process(COMMAND ${RUN_UNIT_TESTS}
  --generate_test_groups=TestGroups.cmake
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  RESULT_VARIABLE gen_groups_result
)
message("gen_groups_result: ${gen_groups_result}")

if(gen_groups_result)

  message(WARNING "Could not generate test group definitions:"
          " ${gen_groups_result}")

else()

# Run cmake again to process generated TestGroups.cmake file

execute_process(COMMAND ${CMAKE_COMMAND} .
  WORKING_DIRECTORY ${CTEST_BINARY_DIRECTORY}
  OUTPUT_QUIET ERROR_QUIET)

# Then run the tests

ctest_test()


#
# Coverage
#

if(CTEST_COVERAGE_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    ctest_coverage(RETURN_VALUE coverage_result)
  endif()
endif(CTEST_COVERAGE_COMMAND)

#
# Memory Checker
#

if(CTEST_MEMORYCHECK_COMMAND)
  if(CTEST_MODEL STREQUAL "Continuous")
    ctest_memcheck(RETURN_VALUE memcheck_result)
  endif()
endif(CTEST_MEMORYCHECK_COMMAND)


endif(gen_groups_result)
endif(NOT RUN_UNIT_TESTS)
endif(NOT build_result)
endif(NOT config_result)

#
# Submit results
#

if(NOT DEFINED SUBMIT OR SUBMIT)
  ctest_submit()
endif()
